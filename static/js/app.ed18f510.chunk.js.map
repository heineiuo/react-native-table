{"version":3,"sources":["src/TableContext.tsx","src/ColumnReindexer.tsx","src/ColumnResizer.tsx","src/TableHeadCell.tsx","src/TableHead.tsx","src/ColumnSeperater.tsx","src/TableRowCellHighlight.tsx","src/TableRowCell.tsx","src/TableRow.tsx","src/TableFooter.tsx","src/TableWithFlatList.tsx","src/Table.tsx","src/useKeyDown.tsx","src/TableUtils.tsx","App.tsx"],"names":["TableContext","createContext","useTable","useContext","ColumnReindexer","column","children","index","debug","columns","rowHeight","panController","reIndex","columnKeyExtractor","widthValue","leftValue","opacityValue","useRef","Animated","Value","current","startPosition","columnKey","panResponder","useMemo","PanResponder","create","onMoveShouldSetPanResponder","event","gestureState","stateID","onPanResponderGrant","setValue","left","JSON","parse","stringify","console","log","nativeEvent","locationX","onPanResponderMove","currentX","dx","highlightField","field1","highlightValue","field1Right","rightValue","Math","abs","onPanResponderRelease","highlightIndex","i","toIndex","fromIndex","View","panHandlers","style","zIndex","opacity","width","height","ColumnResizer","resizeable","resizerWidth","borderColor","cellMinWidth","highlightBorderColor","resizeMode","indexCellWidth","onChangeColumnSize","columnId","internalWidthValueListenerId","widthValueListenerId","disable","currentWidthValue","internalWidthValue","nextField","onPanResponderTerminate","onPanResponderTerminationRequest","onPanResponderReject","currentWidth","setOffset","maxWidth","nextFieldWidth","removeAllListeners","addListener","value","flattenOffset","removeListener","position","top","subtract","Pressable","display","alignItems","state","hovered","backgroundColor","interpolate","inputRange","outputRange","TableHeadCell","ColumnHeaderComponent","header","padding","Text","title","columnIndex","field","overflow","borderBottomWidth","TableHead","totalWidthValue","tailCellWidth","tableWidth","HeadColumnHeaderComponent","TailColumnHeaderComponent","tailCell","headCell","minWidth","flexDirection","justifyContent","map","ColumnSeperater","styles","wrapper","right","StyleSheet","TableRowCellHighlight","visible","color","borderWidth","TableRowCell","row","rowIndex","data","rowId","pressed","focusCell","renderCell","cellsMap","useState","focused","setIsFocused","cellRef","blur","focus","useCallback","useEffect","set","TouchableOpacity","onPress","item","TableRow","cellsExtractor","rowHoverdBackgroundColor","keyExtractor","TailCellComponent","IndexCellComponent","indexCell","find","cell","TableFooter","FooterIndexCellComponent","FooterCellComponent","footerCell","TableWithFlatList","onLayout","userSelect","renderItem","ListEmptyComponent","extraFlatListProps","getItemLayout","_","length","offset","FlatList","initialNumToRender","borderRadius","borderTopWidth","borderRightWidth","borderLeftWidth","maxToRenderPerBatch","disableVirtualization","stickyHeaderIndices","ListHeaderComponent","ListFooterComponent","Table","forwardRef","ref","key","callback","preventScrollWhenArrowMove","cells","id","useRecyclerListView","cellWidth","onChangeColumns","onValueChange","onEndReached","onEndReachedThreshold","tailCellLeftValue","setTableWidth","Map","columnsWidth","internalColumns","nextColumns","currentIndex","result","initialWidth","add","push","resetColumnPosition","nextColumnsWidth","focusedCell","options","next","get","payload","nextState","slice","target","splice","internalRenderCell","option","handleLayout","e","layout","internalChangeColumnSize","useImperativeHandle","getFocusedCell","getColumns","findIndex","upRowId","preventDefault","downRowId","leftColumnId","rightColumnId","Platform","OS","document","addEventListener","handler","removeEventListener","match","includes","Provider","createElement","displayName","sampleData","Array","from","v","k","fields","fieldId","random","toString","sampleFields","App","useWindowDimensions","tableRef","val1","val2","val4","val3","addColumn","body","margin","setTimeout","timing","toValue","duration","useNativeDriver","start","SafeAreaView","initialColumns","numberOfLines","paddingHorizontal","paddingVertical"],"mappings":"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","file":"static/js/app.ed18f510.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\n\nimport { TableContextState } from \"./TableTypes\";\n\nexport const TableContext = createContext({} as TableContextState);\n\nexport function useTable() {\n  return useContext(TableContext);\n}\n","import React, { useRef, useMemo, ReactNode } from \"react\";\nimport { Animated, PanResponder } from \"react-native\";\n\nimport { useTable } from \"./TableContext\";\n\nexport function ColumnReindexer({\n  column,\n  children,\n  index,\n}: {\n  column: any;\n  index: number;\n  children: ReactNode;\n}) {\n  const {\n    debug,\n    columns,\n    rowHeight,\n    panController,\n    reIndex,\n    columnKeyExtractor,\n  } = useTable();\n  const { widthValue, leftValue } = column;\n  const opacityValue = useRef(new Animated.Value(1)).current;\n  const startPosition = useRef(0);\n\n  const columnKey = columnKeyExtractor(column);\n  const panResponder = useMemo(() => {\n    return PanResponder.create({\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        if (!panController.current) {\n          panController.current = gestureState.stateID;\n          return true;\n        }\n        return panController.current === gestureState.stateID;\n      },\n      onPanResponderGrant: (event, gestureState) => {\n        opacityValue.setValue(0.4);\n        const left = JSON.parse(JSON.stringify(leftValue));\n        if (debug) {\n          console.log(\"[reindex] grant: \", left, event.nativeEvent.locationX);\n        }\n        startPosition.current = left + event.nativeEvent.locationX;\n      },\n      onPanResponderMove: (event, gestureState) => {\n        if (debug) {\n          console.log(\"onPanResponderMove\", event);\n        }\n        const currentX = startPosition.current + gestureState.dx;\n\n        let highlightField = null;\n        for (const field1 of columns) {\n          if (highlightField) {\n            field1.highlightValue.setValue(0);\n          } else {\n            const field1Right = JSON.parse(JSON.stringify(field1.rightValue));\n            if (Math.abs(field1Right - currentX) < 50) {\n              highlightField = field1;\n              field1.highlightValue.setValue(1);\n            } else {\n              field1.highlightValue.setValue(0);\n            }\n          }\n        }\n      },\n      onPanResponderRelease: (event, gestureState) => {\n        if (debug) {\n          console.log(\"onPanResponderRelease\", event);\n        }\n        opacityValue.setValue(1);\n        panController.current = null;\n\n        const currentX = startPosition.current + gestureState.dx;\n\n        let highlightField = null;\n        let highlightIndex = -1;\n        let i = 0;\n        for (const field1 of columns) {\n          if (!highlightField && columnKeyExtractor(field1) !== columnKey) {\n            const field1Right = JSON.parse(JSON.stringify(field1.rightValue));\n            if (Math.abs(field1Right - currentX) < 50) {\n              highlightField = field1;\n              highlightIndex = i;\n            }\n          }\n          field1.highlightValue.setValue(0);\n          i++;\n        }\n        if (highlightField) {\n          let toIndex = highlightIndex + 1;\n          if (toIndex === index) {\n            // console.log(\"[reindex] not change\");\n          } else {\n            if (index < highlightIndex) {\n              toIndex--;\n            }\n            if (debug) {\n              console.log(`[reindex] fromIndex ${index} toIndex ${toIndex}`);\n            }\n            reIndex({ fromIndex: index, toIndex });\n          }\n        } else {\n          if (debug) {\n            console.log(\"[reindex] not change, release at wrong position\");\n          }\n        }\n      },\n    });\n  }, [\n    debug,\n    columns,\n    panController,\n    columnKey,\n    columnKeyExtractor,\n    index,\n    leftValue,\n    opacityValue,\n    reIndex,\n  ]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={{\n        zIndex: -1,\n        opacity: opacityValue,\n        width: widthValue,\n        height: rowHeight,\n      }}\n    >\n      {children}\n    </Animated.View>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Pressable, Animated, PanResponder } from \"react-native\";\n\nimport { useTable } from \"./TableContext\";\n\nexport function ColumnResizer({\n  index,\n  column,\n  resizeable = false,\n}: {\n  index: number;\n  column: any;\n  resizeable?: boolean;\n}) {\n  const { highlightValue, widthValue } = column;\n  const {\n    debug,\n    rowHeight,\n    panController,\n    columns,\n    resizerWidth,\n    borderColor,\n    cellMinWidth,\n    highlightBorderColor,\n    resizeMode,\n    indexCellWidth,\n    columnKeyExtractor,\n    onChangeColumnSize,\n  } = useTable();\n\n  const columnId = columnKeyExtractor(column);\n\n  const panResponder = useMemo(() => {\n    if (!resizeable) {\n      return {\n        panHandlers: {},\n      };\n    }\n    let internalWidthValueListenerId = null;\n    let widthValueListenerId = null;\n    let disable = false;\n    let currentWidthValue = 0;\n    const internalWidthValue = new Animated.Value(0);\n    const nextField = columns[index + 1];\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        if (debug) {\n          console.log(\"onPanResponderTerminate\", event);\n        }\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        if (debug) {\n          console.log(\"onPanResponderTerminationRequest\", event);\n        }\n        return false;\n      },\n      onPanResponderReject: (event) => {\n        if (debug) {\n          console.log(\"onPanResponderReject\", event);\n        }\n      },\n\n      /**\n       * 为了不和位置调整冲突，在context里记录当前的stateID，\n       * 当stateID一致时返回true，否则返回false\n       */\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        if (debug) {\n          console.log(\n            \"onMoveShouldSetPanResponder\",\n            event,\n            panController.current,\n            gestureState.stateID\n          );\n        }\n        if (!panController.current) {\n          panController.current = gestureState.stateID;\n          return true;\n        }\n        return panController.current === gestureState.stateID;\n      },\n      /**\n       * 手势初始化\n       * 1. 判断是否是最后一个Field\n       * 2. 计算最大宽度\n       */\n      onPanResponderGrant: () => {\n        if (debug) {\n          console.log(\"onPanResponderGrant\");\n        }\n        disable = false;\n        highlightValue.setValue(1);\n        const currentWidth = JSON.parse(JSON.stringify(widthValue));\n        widthValue.setOffset(currentWidth);\n        internalWidthValue.setOffset(currentWidth);\n\n        /**\n         * 最大宽度\n         * 计算方式：当前column宽度+下一个column宽度-最小宽度\n         * -1代表不设置限制，目前最后一个column不设置限制\n         */\n        let maxWidth = -1;\n\n        if (resizeMode === \"keep-total-width\" && nextField) {\n          const nextFieldWidth = JSON.parse(\n            JSON.stringify(nextField.widthValue)\n          );\n          maxWidth = currentWidth + nextFieldWidth - cellMinWidth;\n          nextField.widthValue.setOffset(nextFieldWidth);\n        }\n\n        /**\n         * 监听宽度变化，当超过最大宽度或小于最小宽度时禁止调整，\n         * 否则允许调整\n         */\n        internalWidthValue.removeAllListeners();\n        widthValue.removeAllListeners();\n\n        internalWidthValueListenerId = internalWidthValue.addListener(\n          ({ value }) => {\n            if (value < cellMinWidth || (maxWidth > -1 && value > maxWidth)) {\n              disable = true;\n            } else {\n              disable = false;\n            }\n          }\n        );\n        widthValueListenerId = widthValue.addListener(({ value }) => {\n          currentWidthValue = value;\n        });\n      },\n      /**\n       * 移动手势时修改animated value\n       * 1. 先更新internalWidthValue，这个值用来判断是否disable，所以\n       * 需要保持更新，放在disable之前。\n       *\n       */\n      onPanResponderMove: (event, gestureState) => {\n        if (debug) {\n          console.log(\"resizer onPanResponderMove\", panController.current);\n        }\n        internalWidthValue.setValue(gestureState.dx);\n        if (disable) {\n          return;\n        }\n        widthValue.setValue(gestureState.dx);\n\n        if (resizeMode === \"keep-total-width\" && nextField) {\n          nextField.widthValue.setValue(-gestureState.dx);\n        }\n      },\n      /**\n       * 松开手势时flattenOffset\n       */\n      onPanResponderRelease: () => {\n        if (debug) {\n          console.log(\"onPanResponderRelease\");\n        }\n        highlightValue.setValue(0);\n        widthValue.flattenOffset();\n        internalWidthValue.flattenOffset();\n\n        panController.current = null;\n        if (nextField) {\n          nextField.widthValue.flattenOffset();\n        }\n        onChangeColumnSize({ width: currentWidthValue, columnId });\n        internalWidthValue.removeListener(internalWidthValueListenerId);\n        widthValue.removeListener(widthValueListenerId);\n        disable = false;\n      },\n    });\n  }, [\n    debug,\n    columnId,\n    onChangeColumnSize,\n    resizeable,\n    highlightValue,\n    columns,\n    resizeMode,\n    cellMinWidth,\n    index,\n    panController,\n    widthValue,\n  ]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          top: 0,\n          left: Animated.subtract(column.rightValue, resizerWidth / 2),\n          zIndex: 10,\n          height: rowHeight,\n          width: resizerWidth,\n        },\n      ]}\n    >\n      <Pressable\n        style={[\n          {\n            display: \"flex\",\n            alignItems: \"center\",\n            width: resizerWidth,\n            height: rowHeight,\n          },\n        ]}\n      >\n        {(state) => {\n          const hovered = (state as unknown as any).hovered;\n          return (\n            <Animated.View\n              style={[\n                {\n                  height: rowHeight,\n                },\n                {\n                  backgroundColor: highlightValue.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [borderColor, highlightBorderColor],\n                  }),\n                  width: highlightValue.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [1, 3],\n                  }),\n                },\n                hovered && {\n                  width: 3,\n                  backgroundColor: highlightBorderColor,\n                },\n              ]}\n            />\n          );\n        }}\n      </Pressable>\n    </Animated.View>\n  );\n}\n","import React from \"react\";\nimport { Text, View, Animated } from \"react-native\";\n\nimport { ColumnReindexer } from \"./ColumnReindexer\";\nimport { ColumnResizer } from \"./ColumnResizer\";\nimport { useTable } from \"./TableContext\";\n\nexport function TableHeadCell({\n  resizeable = false,\n  column,\n  index,\n}: {\n  resizeable?: boolean;\n  column: any;\n  index: number;\n}) {\n  const { rowHeight, borderColor, ColumnHeaderComponent } = useTable();\n\n  let header = (\n    <View\n      style={{\n        padding: 4,\n      }}\n    >\n      <Text>{column.title}</Text>\n    </View>\n  );\n\n  if (ColumnHeaderComponent) {\n    if (\"type\" in ColumnHeaderComponent) {\n      header = ColumnHeaderComponent;\n    } else {\n      header = (\n        <ColumnHeaderComponent\n          resizeable={resizeable}\n          columnIndex={index}\n          column={column}\n          field={column}\n        />\n      );\n    }\n  }\n\n  return (\n    <>\n      <Animated.View\n        style={[\n          {\n            overflow: \"hidden\",\n            zIndex: -1,\n            borderColor,\n            borderBottomWidth: 1,\n            height: rowHeight,\n            top: 0,\n            alignItems: \"center\",\n            width: column.widthValue,\n          },\n        ]}\n      >\n        <ColumnReindexer column={column} index={index}>\n          {header}\n        </ColumnReindexer>\n      </Animated.View>\n      <ColumnResizer resizeable={resizeable} column={column} index={index} />\n    </>\n  );\n}\n","import React, { ReactNode, useEffect } from \"react\";\nimport { View, Animated } from \"react-native\";\n\nimport { useTable } from \"./TableContext\";\nimport { TableHeadCell } from \"./TableHeadCell\";\n\nexport function TableHead() {\n  const {\n    borderColor,\n    indexCellWidth,\n    columns,\n    rowHeight,\n    totalWidthValue,\n    tailCellWidth,\n    resizeable,\n    tableWidth,\n    HeadColumnHeaderComponent,\n    TailColumnHeaderComponent,\n    columnKeyExtractor,\n  } = useTable();\n\n  let tailCell: ReactNode = null;\n  let headCell: ReactNode = null;\n\n  if (TailColumnHeaderComponent) {\n    if (\"type\" in TailColumnHeaderComponent) {\n      tailCell = TailColumnHeaderComponent;\n    } else {\n      tailCell = <TailColumnHeaderComponent />;\n    }\n  }\n\n  if (HeadColumnHeaderComponent) {\n    if (\"type\" in HeadColumnHeaderComponent) {\n      headCell = HeadColumnHeaderComponent;\n    } else {\n      headCell = <HeadColumnHeaderComponent />;\n    }\n  }\n\n  return (\n    <Animated.View\n      style={[\n        {\n          width: totalWidthValue,\n          minWidth: tableWidth,\n          borderBottomWidth: 1,\n          height: rowHeight,\n          borderColor,\n          backgroundColor: \"#fff\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"flex-start\",\n        },\n      ]}\n    >\n      <View\n        style={{\n          height: rowHeight,\n          width: indexCellWidth,\n        }}\n      >\n        {headCell}\n      </View>\n      {columns.map((field, index) => {\n        return (\n          <TableHeadCell\n            resizeable={resizeable}\n            column={field}\n            index={index}\n            key={columnKeyExtractor(field)}\n          />\n        );\n      })}\n      <Animated.View\n        style={{\n          minWidth: tailCellWidth,\n          height: rowHeight,\n        }}\n      >\n        {tailCell}\n      </Animated.View>\n    </Animated.View>\n  );\n}\n","import React from \"react\";\nimport { StyleSheet, Animated } from \"react-native\";\n\nimport { useTable } from \"./TableContext\";\n\nexport function ColumnSeperater({\n  column,\n  columnIndex,\n}: {\n  column: any;\n  columnIndex: number;\n}) {\n  const {\n    rowHeight,\n    resizerWidth,\n    borderColor,\n    highlightBorderColor,\n    indexCellWidth,\n  } = useTable();\n  const { highlightValue } = column;\n\n  return (\n    <Animated.View\n      style={[\n        styles.wrapper,\n        {\n          height: rowHeight,\n          width: resizerWidth,\n          zIndex: highlightValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [-10, 10],\n          }),\n          right: -resizerWidth / 2,\n        },\n      ]}\n    >\n      <Animated.View\n        style={[\n          {\n            height: rowHeight,\n            backgroundColor: highlightValue.interpolate({\n              inputRange: [0, 1],\n              outputRange: [borderColor, highlightBorderColor],\n            }),\n            width: highlightValue.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 3],\n            }),\n          },\n        ]}\n      />\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    position: \"absolute\",\n    top: 0,\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n});\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nexport function TableRowCellHighlight({\n  visible,\n  color,\n}: {\n  visible: boolean;\n  color: any;\n}) {\n  return (\n    <View\n      style={[\n        {\n          display: visible ? \"flex\" : \"none\",\n          zIndex: 0,\n          position: \"absolute\",\n          width: \"100%\",\n          height: \"100%\",\n          borderWidth: 2,\n          top: 0,\n          left: 0,\n          borderColor: color,\n        },\n      ]}\n    >\n      <View\n        style={[\n          {\n            width: \"100%\",\n            height: \"100%\",\n            borderWidth: 3,\n            top: 0,\n            left: 0,\n            borderColor: \"#fff\",\n          },\n        ]}\n      />\n    </View>\n  );\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { Animated, TouchableOpacity } from \"react-native\";\n\nimport { ColumnSeperater } from \"./ColumnSeperater\";\nimport { useTable } from \"./TableContext\";\nimport { TableRowCellHighlight } from \"./TableRowCellHighlight\";\n\nexport function TableRowCell({\n  column,\n  row,\n  columnId,\n  columnIndex,\n  rowIndex,\n  data,\n  rowId,\n  hovered,\n  pressed,\n}: {\n  pressed: boolean;\n  rowId: string;\n  columnId: string;\n  data?: any;\n  resizeable?: boolean;\n  column: any;\n  row: any;\n  columnIndex: number;\n  rowIndex: number;\n  hovered: boolean;\n}) {\n  const {\n    focusCell,\n    borderColor,\n    highlightBorderColor,\n    rowHeight,\n    renderCell,\n    columnKeyExtractor,\n    cellsMap,\n  } = useTable();\n\n  const [focused, setIsFocused] = useState(false);\n\n  const cellRef = useRef({\n    ...data,\n    columnId,\n    rowId,\n    blur() {\n      setIsFocused(false);\n    },\n    focus() {\n      setIsFocused(true);\n    },\n  });\n\n  const focus = useCallback(() => {\n    focusCell({ rowId, columnId });\n  }, [rowId, columnId, focusCell]);\n\n  useEffect(() => {\n    cellsMap.current.set(`${rowId}_${columnId}`, cellRef.current);\n  }, [focus, cellsMap, data, rowId, columnId]);\n\n  return (\n    <>\n      <Animated.View\n        style={[\n          {\n            zIndex: 5,\n            position: \"relative\",\n            borderColor,\n            borderBottomWidth: 1,\n            height: rowHeight,\n            alignItems: \"center\",\n            width: column.widthValue,\n            /**\n             * Set overflow visible to keep seperator visible\n             */\n            overflow: \"visible\",\n          },\n        ]}\n      >\n        <TableRowCellHighlight visible={focused} color={highlightBorderColor} />\n        <TouchableOpacity\n          style={{ width: \"100%\", height: \"100%\", overflow: \"hidden\" }}\n          onPress={focus}\n        >\n          {renderCell({\n            focused,\n            focus,\n            hovered,\n            pressed,\n            column,\n            columnId: columnKeyExtractor(column),\n            columnIndex,\n            row,\n            rowId,\n            rowIndex,\n            item: data,\n          })}\n        </TouchableOpacity>\n        <ColumnSeperater column={column} columnIndex={columnIndex} />\n      </Animated.View>\n    </>\n  );\n}\n","import React, { ReactNode, useMemo } from \"react\";\nimport { View, Text, Animated, Pressable } from \"react-native\";\n\nimport { useTable } from \"./TableContext\";\nimport { TableRowCell } from \"./TableRowCell\";\n\nexport function TableRow({ item, index = 0 }: { item: any; index: number }) {\n  const {\n    columns,\n    columnKeyExtractor,\n    cellsExtractor,\n    rowHoverdBackgroundColor,\n    rowHeight,\n    borderColor,\n    indexCellWidth,\n    totalWidthValue,\n    keyExtractor,\n    TailCellComponent,\n    IndexCellComponent,\n    tableWidth,\n  } = useTable();\n\n  const rowId = useMemo(() => {\n    return keyExtractor(item);\n  }, [keyExtractor, item]);\n\n  let tailCell: ReactNode = null;\n  let indexCell: ReactNode = (\n    <View>\n      <Text>{index + 1}</Text>\n    </View>\n  );\n\n  if (TailCellComponent) {\n    if (\"type\" in TailCellComponent) {\n      tailCell = TailCellComponent;\n    } else {\n      tailCell = <TailCellComponent index={index} />;\n    }\n  }\n\n  if (IndexCellComponent) {\n    if (\"type\" in IndexCellComponent) {\n      indexCell = IndexCellComponent;\n    } else {\n      indexCell = <IndexCellComponent index={index} />;\n    }\n  }\n\n  return (\n    <Animated.View\n      style={{\n        height: rowHeight,\n        width: totalWidthValue,\n        minWidth: tableWidth,\n      }}\n    >\n      <Pressable\n        style={(state) => {\n          const hovered = (state as unknown as any).hovered;\n          return [\n            {\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"flex-start\",\n              height: rowHeight,\n              width: \"100%\",\n              borderBottomWidth: 1,\n              borderColor,\n            },\n            hovered && {\n              backgroundColor: rowHoverdBackgroundColor,\n            },\n          ];\n        }}\n      >\n        {(state) => {\n          const pressed = state.pressed;\n          const hovered = (state as unknown as any).hovered;\n          return (\n            <>\n              <View\n                style={{\n                  // position: \"absolute\",\n                  left: 0,\n                  top: 0,\n                  padding: 4,\n                  height: rowHeight,\n                  width: indexCellWidth,\n                }}\n              >\n                {indexCell}\n              </View>\n              {columns.map((column, columnIndex) => {\n                const columnId = columnKeyExtractor(column);\n                const data = cellsExtractor(item).find(\n                  (cell: any) => columnKeyExtractor(cell) === columnId\n                );\n                return (\n                  <TableRowCell\n                    column={column}\n                    columnId={columnId}\n                    rowId={rowId}\n                    row={item}\n                    rowIndex={index}\n                    columnIndex={columnIndex}\n                    hovered={hovered}\n                    pressed={pressed}\n                    data={data}\n                    key={columnId}\n                  />\n                );\n              })}\n              {tailCell}\n            </>\n          );\n        }}\n      </Pressable>\n    </Animated.View>\n  );\n}\n","import React, { ReactNode, useEffect } from \"react\";\nimport { View, Animated } from \"react-native\";\n\nimport { useTable } from \"./TableContext\";\n\nexport function TableFooter() {\n  const {\n    borderColor,\n    indexCellWidth,\n    rowHeight,\n    totalWidthValue,\n    tableWidth,\n    FooterIndexCellComponent,\n    FooterCellComponent,\n  } = useTable();\n\n  let indexCell: ReactNode = null;\n  let footerCell: ReactNode = null;\n\n  if (FooterIndexCellComponent) {\n    if (\"type\" in FooterIndexCellComponent) {\n      indexCell = FooterIndexCellComponent;\n    } else {\n      indexCell = <FooterIndexCellComponent />;\n    }\n  }\n\n  if (FooterCellComponent) {\n    if (\"type\" in FooterCellComponent) {\n      footerCell = FooterCellComponent;\n    } else {\n      footerCell = <FooterCellComponent />;\n    }\n  }\n\n  return (\n    <Animated.View\n      style={[\n        {\n          width: totalWidthValue,\n          minWidth: tableWidth,\n          borderBottomWidth: 1,\n          height: rowHeight,\n          borderColor,\n          backgroundColor: \"#fff\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"flex-start\",\n        },\n      ]}\n    >\n      <View\n        style={{\n          height: rowHeight,\n          width: indexCellWidth,\n        }}\n      >\n        {indexCell}\n      </View>\n      <Animated.View\n        style={{\n          minWidth: Animated.subtract(totalWidthValue, indexCellWidth),\n          height: rowHeight,\n        }}\n      >\n        {footerCell}\n      </Animated.View>\n    </Animated.View>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { TableFooter } from \"./TableFooter\";\nimport { SupportedFlatListProps } from \"./TableTypes\";\n\nexport function TableWithFlatList({\n  onLayout,\n  userSelect,\n  borderColor,\n  style,\n  rowHeight,\n  TableHead,\n  keyExtractor,\n  data,\n  renderItem,\n  ListEmptyComponent,\n  ...extraFlatListProps\n}: SupportedFlatListProps & {\n  userSelect: any;\n  borderColor: any;\n  style: any;\n  rowHeight: any;\n  TableHead: any;\n  keyExtractor: any;\n  renderItem: any;\n}) {\n  const getItemLayout = useCallback(\n    (_, index) => {\n      return { length: rowHeight, offset: rowHeight * index, index };\n    },\n    [rowHeight]\n  );\n\n  return (\n    <Animated.FlatList\n      onLayout={onLayout}\n      initialNumToRender={10}\n      style={[\n        {\n          userSelect,\n          overflow: \"auto\",\n          borderRadius: 2,\n          borderColor,\n          borderTopWidth: 1,\n          borderRightWidth: 1,\n          borderLeftWidth: 1,\n          borderBottomWidth: 1,\n        },\n        style,\n      ]}\n      getItemLayout={getItemLayout}\n      maxToRenderPerBatch={1}\n      disableVirtualization={false}\n      stickyHeaderIndices={[0]}\n      ListHeaderComponent={TableHead}\n      ListFooterComponent={TableFooter}\n      ListEmptyComponent={ListEmptyComponent}\n      keyExtractor={keyExtractor}\n      data={data}\n      renderItem={renderItem}\n      {...extraFlatListProps}\n    />\n  );\n}\n","import React, {\n  useRef,\n  useState,\n  useCallback,\n  useMemo,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n  createElement,\n} from \"react\";\nimport { Animated, Text, View } from \"react-native\";\n\nimport { TableContext } from \"./TableContext\";\nimport { TableHead } from \"./TableHead\";\nimport { TableRow } from \"./TableRow\";\nimport { TableContextState, TableInstance, TableProps } from \"./TableTypes\";\nimport { resetColumnPosition } from \"./TableUtils\";\nimport { TableWithFlatList } from \"./TableWithFlatList\";\nimport { useKeyDown } from \"./useKeyDown\";\n// import { TableWithRecyclerListView } from \"./TableWithRecyclerListView\";\n\nconst Table = forwardRef<TableInstance, TableProps>(function Table(\n  {\n    debug = false,\n    preventScrollWhenArrowMove = true,\n    cellsExtractor = (row: any) => row.cells,\n    columnKeyExtractor = (column: any) => column.columnId,\n    keyExtractor = (item) => item.id,\n    useRecyclerListView = false,\n    columns,\n    resizeMode = \"increase-total-width\",\n    style,\n    data,\n    resizeable = true,\n    cellWidth = 150,\n    resizerWidth = 24,\n    borderColor = \"#d8dee4\",\n    highlightBorderColor = \"blue\",\n    indexCellWidth = 40,\n    tailCellWidth = 100,\n    rowHeight = 36,\n    cellMinWidth = 40,\n    rowHoverdBackgroundColor = \"#f6f8fa\",\n    ColumnHeaderComponent,\n    IndexCellComponent,\n    TailCellComponent,\n    HeadColumnHeaderComponent,\n    TailColumnHeaderComponent,\n    FooterIndexCellComponent,\n    FooterCellComponent,\n    renderCell,\n    onChangeColumnSize,\n    onChangeColumns,\n    onValueChange,\n    onEndReached,\n    onEndReachedThreshold,\n    onLayout,\n  },\n  ref\n) {\n  const tailCellLeftValue = useRef(new Animated.Value(0)).current;\n  const [tableWidth, setTableWidth] = useState(0);\n  const cellsMap = useRef<Map<string, any>>(new Map());\n\n  /**\n   * 内部记录columnd的widthValue\n   */\n  const columnsWidth = useRef<any>({});\n\n  /**\n   * 内部使用的column, 在props.columns的基础上\n   * 添加leftValue, widthValue, rightValue\n   */\n  const internalColumns = useMemo(() => {\n    const nextColumns = resetColumnPosition({\n      columnsWidth: columnsWidth.current,\n      columns,\n      indexCellWidth,\n      cellWidth,\n      resizerWidth,\n      tailCellWidth,\n    });\n    const nextColumnsWidth = {};\n    for (const column of nextColumns) {\n      nextColumnsWidth[columnKeyExtractor(column)] = column.widthValue;\n    }\n    columnsWidth.current = nextColumnsWidth;\n    return nextColumns;\n  }, [\n    columns,\n    indexCellWidth,\n    columnKeyExtractor,\n    cellWidth,\n    resizerWidth,\n    tailCellWidth,\n  ]);\n\n  const panController = useRef({}).current;\n  const [userSelect] = useState(\"none\");\n  const focusedCell = useRef<any>();\n\n  const focusCell = useCallback((options: any) => {\n    if (focusedCell.current) {\n      focusedCell.current.blur();\n    }\n    const { rowId, columnId } = options;\n    const next = cellsMap.current.get(`${rowId}_${columnId}`);\n\n    if (next) {\n      focusedCell.current = next;\n      focusedCell.current.focus();\n    }\n  }, []);\n\n  const reIndex = useCallback(\n    (payload: { fromIndex: number; toIndex: number }) => {\n      const { fromIndex, toIndex } = payload;\n      const nextState = columns.slice();\n      const target = nextState[fromIndex];\n      nextState.splice(fromIndex, 1);\n      nextState.splice(toIndex, 0, target);\n      return onChangeColumns(nextState);\n    },\n    [columns, onChangeColumns]\n  );\n\n  const internalRenderCell = useCallback(\n    (option) => {\n      if (renderCell) {\n        return renderCell(option);\n      }\n      return (\n        <View\n          style={{\n            padding: 4,\n          }}\n        >\n          <Text style={{}}>{option.item.value}</Text>\n        </View>\n      );\n    },\n    [renderCell]\n  );\n\n  const handleLayout = useCallback(\n    (e) => {\n      const tableWidth = e.nativeEvent.layout.width;\n      setTableWidth(tableWidth);\n      if (onLayout) {\n        onLayout(e);\n      }\n    },\n    [onLayout]\n  );\n\n  const totalWidthValue = useMemo(() => {\n    let totalWidthValue = new Animated.Value(indexCellWidth + tailCellWidth);\n    for (const field of internalColumns) {\n      totalWidthValue = Animated.add(\n        totalWidthValue,\n        field.widthValue\n      ) as Animated.Value;\n    }\n\n    return totalWidthValue;\n  }, [internalColumns, indexCellWidth, tailCellWidth]);\n\n  const internalChangeColumnSize = useCallback(\n    (options) => {\n      if (onChangeColumnSize) {\n        onChangeColumnSize(options);\n      }\n    },\n    [onChangeColumnSize]\n  );\n\n  const value = useMemo<TableContextState>(() => {\n    return {\n      debug,\n      preventScrollWhenArrowMove,\n      keyExtractor,\n      cellsExtractor,\n      columnKeyExtractor,\n      tailCellWidth,\n      panController,\n      resizerWidth,\n      resizeable,\n      columns: internalColumns,\n      cellWidth,\n      borderColor,\n      highlightBorderColor,\n      rowHoverdBackgroundColor,\n      rowHeight,\n      focusCell,\n      indexCellWidth,\n      reIndex,\n      totalWidthValue,\n      cellMinWidth,\n      renderCell: internalRenderCell,\n      ColumnHeaderComponent,\n      TailColumnHeaderComponent,\n      HeadColumnHeaderComponent,\n      FooterIndexCellComponent,\n      FooterCellComponent,\n      TailCellComponent,\n      IndexCellComponent,\n      tailCellLeftValue,\n      resizeMode,\n      tableWidth,\n      cellsMap,\n      onChangeColumnSize: internalChangeColumnSize,\n    };\n  }, [\n    debug,\n    internalChangeColumnSize,\n    preventScrollWhenArrowMove,\n    cellsExtractor,\n    columnKeyExtractor,\n    tailCellWidth,\n    reIndex,\n    panController,\n    rowHeight,\n    cellWidth,\n    borderColor,\n    resizerWidth,\n    internalColumns,\n    resizeable,\n    keyExtractor,\n    highlightBorderColor,\n    rowHoverdBackgroundColor,\n    focusCell,\n    indexCellWidth,\n    TailColumnHeaderComponent,\n    TailCellComponent,\n    tailCellLeftValue,\n    cellMinWidth,\n    internalRenderCell,\n    IndexCellComponent,\n    ColumnHeaderComponent,\n    HeadColumnHeaderComponent,\n    FooterIndexCellComponent,\n    FooterCellComponent,\n    totalWidthValue,\n    tableWidth,\n    resizeMode,\n  ]);\n\n  useImperativeHandle(\n    ref,\n    () => {\n      function getFocusedCell() {\n        return focusedCell;\n      }\n      function getColumns() {\n        return columns;\n      }\n\n      return {\n        getFocusedCell,\n        focusCell,\n        getColumns,\n      };\n    },\n    [focusCell, columns]\n  );\n\n  useKeyDown(\n    [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"],\n    useCallback(\n      (event: any) => {\n        if (focusedCell.current) {\n          const { rowId, columnId } = focusedCell.current;\n          const rowIndex = data.findIndex(\n            (item) => keyExtractor(item, 0) === rowId\n          );\n          const columnIndex = columns.findIndex(\n            (item) => columnKeyExtractor(item, 0) === columnId\n          );\n          if (event.key === \"ArrowUp\") {\n            if (rowIndex > 0) {\n              const upRowId = keyExtractor(data[rowIndex - 1], 0);\n              if (preventScrollWhenArrowMove) {\n                event.preventDefault();\n              }\n              focusCell({ columnId, rowId: upRowId });\n            }\n          } else if (event.key === \"ArrowDown\") {\n            if (rowIndex < data.length - 1) {\n              const downRowId = keyExtractor(data[rowIndex + 1], 0);\n              if (preventScrollWhenArrowMove) {\n                event.preventDefault();\n              }\n              focusCell({ columnId, rowId: downRowId });\n            }\n          } else if (event.key === \"ArrowLeft\") {\n            if (columnIndex > 0) {\n              const leftColumnId = columnKeyExtractor(\n                columns[columnIndex - 1],\n                0\n              );\n              if (preventScrollWhenArrowMove) {\n                event.preventDefault();\n              }\n              focusCell({ columnId: leftColumnId, rowId });\n            }\n          } else if (event.key === \"ArrowRight\") {\n            if (columnIndex < columns.length - 1) {\n              const rightColumnId = columnKeyExtractor(\n                columns[columnIndex + 1],\n                0\n              );\n              if (preventScrollWhenArrowMove) {\n                event.preventDefault();\n              }\n              focusCell({ columnId: rightColumnId, rowId });\n            }\n          }\n        }\n      },\n      [\n        data,\n        focusCell,\n        preventScrollWhenArrowMove,\n        columns,\n        columnKeyExtractor,\n        keyExtractor,\n      ]\n    )\n  );\n\n  useEffect(() => {\n    if (onValueChange) {\n      onValueChange(value);\n    }\n  }, [value, onValueChange]);\n\n  return (\n    <TableContext.Provider value={value}>\n      {createElement(\n        // useRecyclerListView ? TableWithRecyclerListView : TableWithFlatList,\n        TableWithFlatList,\n        {\n          onEndReached,\n          borderColor,\n          userSelect,\n          onLayout: handleLayout,\n          style,\n          data,\n          rowHeight,\n          TableHead,\n          keyExtractor,\n          onEndReachedThreshold,\n          renderItem: (data: any) => {\n            return <TableRow {...data} />;\n          },\n        }\n      )}\n    </TableContext.Provider>\n  );\n});\n\nTable.displayName = \"Table\";\n\nexport { Table };\n","import { useEffect } from \"react\";\nimport { Platform } from \"react-native\";\n\nexport function useKeyDown(\n  key: string | string[],\n  callback: (event: KeyboardEvent) => void\n) {\n  useEffect(() => {\n    if (Platform.OS !== \"web\") {\n      return;\n    }\n\n    function handler(event: any) {\n      let match = false;\n      if (typeof key === \"string\" && event.key === key) {\n        match = true;\n      } else if (key.includes(event.key)) {\n        match = true;\n      }\n      if (match) {\n        callback(event);\n      }\n    }\n\n    document.addEventListener(\"keydown\", handler);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handler);\n    };\n  }, [key, callback]);\n}\n","import { Animated } from \"react-native\";\n\n/**\n *\n */\nexport function resetColumnPosition({\n  columns,\n  columnsWidth = {},\n  indexCellWidth,\n  cellWidth,\n  keyExtractor = (column) => column.id,\n}: {\n  columns: any[];\n  columnsWidth?: Record<string, Animated.AnimatedValue>;\n  indexCellWidth: number;\n  tailCellWidth: number;\n  cellWidth: number;\n  resizerWidth: number;\n  keyExtractor?: (column: any) => string;\n}) {\n  const nextColumns: any = [];\n\n  let currentIndex = 0;\n\n  for (const field of columns) {\n    const result = {\n      ...field,\n    };\n    if (currentIndex === 0) {\n      result.leftValue = new Animated.Value(indexCellWidth);\n    } else {\n      result.leftValue = nextColumns[currentIndex - 1].rightValue;\n    }\n\n    result.highlightValue = new Animated.Value(0);\n    const columnKey = keyExtractor(field);\n\n    result.widthValue = columnsWidth[columnKey]\n      ? columnsWidth[columnKey]\n      : new Animated.Value(field.initialWidth ?? cellWidth);\n\n    result.rightValue = Animated.add(result.leftValue, result.widthValue);\n\n    nextColumns.push(result);\n    currentIndex++;\n  }\n\n  return nextColumns;\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  Animated,\n  Platform,\n  SafeAreaView,\n  Text,\n  TouchableOpacity,\n  useWindowDimensions,\n  View,\n} from \"react-native\";\n\nimport { Table, TableInstance } from \"./src/index\";\n\nconst sampleData = () =>\n  Array.from({ length: 1000 }, (v, k) => {\n    return {\n      id: `id${k}`,\n      fields: [\n        { fieldId: \"f1\", value: `${Math.random().toString().slice(2)}` },\n        { fieldId: \"f2\", value: `${Math.random().toString().slice(2)}` },\n        { fieldId: \"f3\", value: `${Math.random().toString().slice(2)}` },\n        { fieldId: \"f4\", value: `${Math.random().toString().slice(2)}` },\n      ],\n    };\n  });\n\nconst sampleFields = () => [\n  { fieldId: \"f1\", title: \"Fileds1\", initialWidth: 400 },\n  { fieldId: \"f2\", title: \"Fileds2\", initialWidth: 200 },\n  { fieldId: \"f3\", title: \"Fileds3\", initialWidth: 200 },\n  { fieldId: \"f4\", title: \"Fileds4\" },\n];\n\nexport default function App() {\n  const { height, width } = useWindowDimensions();\n  const [fields, setFields] = useState(sampleFields);\n  const [data, setData] = useState(sampleData);\n  const tableRef = useRef<TableInstance>();\n\n  const val1 = useRef(new Animated.Value(100));\n  const val2 = useRef(new Animated.Value(200));\n  const val4 = useRef(new Animated.Value(200));\n\n  // work\n  // const val3 = useRef(Animated.add(val1.current, val2.current));\n\n  // work\n  const val3 = useMemo(() => {\n    return Animated.add(Animated.add(val1.current, val2.current), val4.current);\n  }, []);\n\n  const addColumn = useCallback(() => {\n    tableRef.current.addColumn({\n      fieldId: `f${fields.length + 1}`,\n      title: `Fileds${fields.length + 1}`,\n    });\n  }, [fields]);\n\n  const onEndReached = useCallback(() => {\n    console.log(\"onEndReached\");\n  }, []);\n\n  useEffect(() => {\n    if (Platform.OS === \"web\") {\n      document.body.style.overflow = \"hidden\";\n      document.body.style.margin = \"0px\";\n    }\n\n    setTimeout(() => {\n      // work\n      // val1.current.setValue(300);\n\n      // work\n      Animated.timing(val1.current, {\n        toValue: width - 420,\n        duration: 300,\n        useNativeDriver: false,\n      }).start();\n    }, 2000);\n  }, []);\n\n  return (\n    <SafeAreaView>\n      <View style={{ width: \"100%\" }}>\n        <Animated.View\n          style={{\n            backgroundColor: \"#af1\",\n            height: 10,\n            width: val3,\n          }}\n        />\n      </View>\n\n      <Table\n        onChangeColumnSize={console.log}\n        columnKeyExtractor={(item) => item.fieldId}\n        cellsExtractor={(row) => row.fields}\n        cellWidth={400}\n        ref={tableRef}\n        // useRecyclerListView\n        highlightBorderColor=\"blue\"\n        style={{\n          margin: 10,\n          width: width - 40,\n          height: height - 40,\n        }}\n        initialColumns={fields}\n        data={data}\n        IndexCellComponent={({ index }) => {\n          return (\n            <View>\n              <Text numberOfLines={1} style={{}}>\n                &gt;{index + 1}\n              </Text>\n            </View>\n          );\n        }}\n        TailCellComponent={() => {\n          return (\n            <View>\n              <Text>[]</Text>\n            </View>\n          );\n        }}\n        HeadColumnHeaderComponent={() => {\n          return (\n            <View>\n              <TouchableOpacity onPress={addColumn}>\n                <Text>o</Text>\n              </TouchableOpacity>\n            </View>\n          );\n        }}\n        TailColumnHeaderComponent={() => {\n          return (\n            <View>\n              <TouchableOpacity onPress={addColumn}>\n                <Text>Add column</Text>\n              </TouchableOpacity>\n            </View>\n          );\n        }}\n        ColumnHeaderComponent={({ column }) => {\n          return (\n            <View\n              style={{\n                padding: 4,\n              }}\n            >\n              <Text style={{ color: \"green\" }}>{column.title}</Text>\n            </View>\n          );\n        }}\n        FooterIndexCellComponent={() => {\n          return (\n            <View>\n              <Text>+</Text>\n            </View>\n          );\n        }}\n        FooterCellComponent={() => {\n          return (\n            <View>\n              <Text>...</Text>\n            </View>\n          );\n        }}\n        renderCell={({ item }) => {\n          return (\n            <View\n              style={{\n                padding: 4,\n              }}\n            >\n              <Text style={{ color: \"blue\" }}>{item.value}</Text>\n              <TouchableOpacity\n                onPress={(e) => {\n                  e.preventDefault();\n                }}\n                style={{\n                  position: \"absolute\",\n                  right: 4,\n                  top: 4,\n                  borderRadius: 6,\n                  borderColor: \"#eee\",\n                  borderWidth: 1,\n                  backgroundColor: \"#fff\",\n                  paddingHorizontal: 8,\n                  paddingVertical: 4,\n                }}\n              >\n                <Text>↓</Text>\n              </TouchableOpacity>\n            </View>\n          );\n        }}\n        onEndReached={onEndReached}\n      />\n    </SafeAreaView>\n  );\n}\n"],"sourceRoot":""}